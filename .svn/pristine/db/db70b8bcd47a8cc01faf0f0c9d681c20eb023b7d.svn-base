package kr.co.publicvoid.util;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.UUID;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import kr.co.publicvoid.mapper.GameImageMapper;
import kr.co.publicvoid.mapper.GameLanguageMapper;
import kr.co.publicvoid.mapper.GameMapper;
import kr.co.publicvoid.mapper.PublisherMapper;
import kr.co.publicvoid.mapper.ReviewMapper;
import kr.co.publicvoid.mapper.SaleMapper;
import kr.co.publicvoid.vo.GameImageVO;
import kr.co.publicvoid.vo.GameLanguageVO;
import kr.co.publicvoid.vo.GameVO;
import kr.co.publicvoid.vo.PublisherVO;
import kr.co.publicvoid.vo.ReviewVO;
import kr.co.publicvoid.vo.SaleVO;
import lombok.extern.log4j.Log4j;

@Log4j
public class DataUtils {
	
	PublisherMapper publisherMapper = MybatisUtils.sqlSessionFactory().openSession(true).getMapper(PublisherMapper.class);
	GameMapper gameMapper = MybatisUtils.sqlSessionFactory().openSession(true).getMapper(GameMapper.class);
	GameLanguageMapper gameLanguageMapper = MybatisUtils.sqlSessionFactory().openSession(true).getMapper(GameLanguageMapper.class);
	GameImageMapper gameImageMapper = MybatisUtils.sqlSessionFactory().openSession(true).getMapper(GameImageMapper.class);
	SaleMapper saleMapper = MybatisUtils.sqlSessionFactory().openSession(true).getMapper(SaleMapper.class);
	ReviewMapper reviewMapper = MybatisUtils.sqlSessionFactory().openSession(true).getMapper(ReviewMapper.class);
	
	// 퍼블리셔 크롤링 및 등록
	public void registerPublisher() throws Exception {
		
		// 여기서부터 퍼블리셔를 크롤링하여 등록한 부분
		Document doc = Jsoup.connect(
				"https://directg.net/game/game_thumb.html?search_platform=1")
				.get();

		Elements elements = doc.select("select#search_publisher option");
		
		System.out.println(elements);
		
		for(Element e : elements) {
			String publisherName = e.text().trim();
			
			PublisherVO publisherVO = PublisherVO.builder().publisherName(publisherName).build();
			publisherMapper.insert(publisherVO);
		}
	}
	
	// 게임 크롤링 및 등록
	public void registerGame() throws Exception {

		UUID uuid = null;
		
		// 여기서부터는 게임유형-기본게임으로 장르별로 3개씩 긁어와서 등록해 봄
		String url = "https://directg.net/game/game_thumb.html?searchValue=&search_keyword=&sort=&search_category=17&search_platform=1&search_publisher=&search_goods_kind=1";
		
		Document doc = Jsoup.connect(url).get();
		
		Elements elements = doc.select("div.product");
		
		// 여기서부터 게임 데이터 크롤링 및 정제하여 DB에 삽입
		for (Element e : elements) {
			Element aElement = e.select("a").first();

			String href = aElement.attr("href");

			System.out.println("링크: " + href);
			
			// 일단 액션 넣을거라 장르번호는 1

			// 필요한 것 정리
			// 장르번호 (수동으로 작성) - 완료
			// 퍼블리셔번호 (퍼블리셔 번호는 퍼블리셔명을 가져와서 DB에 있는 거랑 비교하여 가져옴. 없으면 기타에 넣을 것임) - 완료
			// 게임명
			// 게임설명
			// 게임영상주소
			// 게임가격
			// 개발사
			// 출시일
			// 연령제한
			// 권장사양
			// 판매량은 필요 없음 (기본값 0)
			
			String gameUrl = "https://directg.net/game" + href.substring(1);
			
			Document gameDoc = Jsoup.connect(gameUrl).get();
			
			// 게임 정보 Element
			Element infoElement = gameDoc.selectFirst(".product-info");

			// 게임명 들어있는 Element
			Element gameNameElement = gameDoc.selectFirst(".productdetails");
			
			// 퍼블리셔명
			String publisherName = infoElement.selectFirst("a").text().trim();
//			System.out.println("퍼블리셔명 : " + publisherName);
			// 해당 퍼블리셔명을 내가 넣어놨던 퍼블리셔 DB에서 찾아서 번호를 찾아온다.
			
			// 퍼블리셔번호 (테이블에서 긁어옴)
			PublisherVO publisherVO = publisherMapper.selectOneByPublisherName(publisherName);
			Long publisherNo = publisherVO.getPublisherNo();
			
			// 게임명
			String gameName = gameNameElement.selectFirst("h1 span").text().trim();

			// 게임설명 들어있는 Element
			Element gameDescElement = gameDoc.selectFirst("#myTabContent");
			
			String gameDesc = gameDescElement.html().trim();
			
			// 동영상 URL 들어있는 Element
			Element urlElement = gameDoc.selectFirst(".embed-responsive-item");

			// 동영상 없으면 넘김 (동영상 있는 것만 넣기로 함)
			if(urlElement == null) {
				continue;
			}
			
			String gameVideoUrl = urlElement.attr("src");
			
			// 게임가격
			Element gamePriceElement = gameDoc.selectFirst("span.PricebasePrice");
			
			// 판매 예정인 게임일 시엔 넘김 (판매 중인 것만 넣기로 함)
			if(gamePriceElement == null) {
				continue;
			}
			
			String gamePriceText = gamePriceElement.text().trim();
			// 정규표현식을 사용할 것이다
			int gamePrice = Integer.parseInt(gamePriceText.replaceAll("[^0-9]", ""));
			
			// 개발사
			String gameDeveloper = infoElement.selectFirst(".vm-display:nth-of-type(5) .vm-value").text().trim();
			
			// 출시일
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			
			Date gameReleaseDate = sdf.parse(infoElement.selectFirst(".release_date .vm-value").text().trim());
			
			// 연령제한 (age_18, age_15, age_12, age_10) -> indexOf로 하기
			String limitText = infoElement.selectFirst("#etc").html();
			
			int gameAgeLimit = 4; // 기본값 4 (분류거부)
			if(limitText.indexOf("age_18") != -1) {
				gameAgeLimit = 3;
			}else if(limitText.indexOf("age_15") != -1) {
				gameAgeLimit = 2;
			}else if(limitText.indexOf("age_12") != -1) {
				gameAgeLimit = 1;
			}else if(limitText.indexOf("age_10") != -1) {
				gameAgeLimit = 0;
			}else {
				// 등급거부라고 할 것임
			}
			
			// 권장사양
			String gameSpec = gameDoc.selectFirst("#myTabContent #goods_info5").html();
			
			// 장르번호는 1부터 9까지 해서 5개 정도씩 일단 넣기
			Long genreNo = 9L;
			System.out.println("장르번호 : " + genreNo);
			System.out.println("퍼블리셔 번호 : " + publisherNo);
			System.out.println("게임명 : " + gameName);
			System.out.println("게임설명 : " + gameDesc);
			System.out.println("게임영상주소 : " + gameVideoUrl);
			System.out.println("게임가격 : " + gamePrice);
			System.out.println("개발사 : " + gameDeveloper);
			System.out.println("출시일 : " + gameReleaseDate.toString());
			System.out.println("연령제한 : " + gameAgeLimit);
			System.out.println("권장사양 : " + gameSpec);
			
			GameVO gameVO = GameVO.builder()
									.genreNo(genreNo)
									.publisherNo(publisherNo)
									.gameName(gameName)
									.gameDesc(gameDesc)
									.gameVideoUrl(gameVideoUrl)
									.gamePrice(gamePrice)
									.gameDeveloper(gameDeveloper)
									.gameReleaseDate(gameReleaseDate)
									.gameAgeLimit(gameAgeLimit)
									.gameSpec(gameSpec)
									.build();
			
			gameMapper.insert(gameVO);
			
			// 게임 넣고 이미지도 같이 넣기
			// 일단 대표 이미지를 넣는다
			Element thumbElement = gameDoc.selectFirst("#goods_img");
			String thumbImageUrl = thumbElement.selectFirst("img").attr("src");
			
			// 일단 이미지를 다운로드 해본다
			uuid = UUID.randomUUID();
			String fileName = uuid.toString() + "." + MyUtils.extractFileExtension(thumbImageUrl);
			String destinationFile = "C:/upload/s3/" + fileName;
			saveImage(thumbImageUrl, destinationFile);
			
			// 이제 이걸 S3에 넣어야 한다
			S3Utils.uploadLocalFile(fileName, destinationFile);
			
			// 크롤링한 거는 따로 원본파일명 없이 그냥 저장명과 똑같이 하도록 하겠다.
			// 이미지는 S3에 올리기로 했으므로 별도의 폴더 분리 없이 하도록 하겠다.
			
			GameImageVO gameImageVO = GameImageVO.builder().gameNo(gameVO.getGameNo()).originFileName(fileName).storedFileName(fileName).isThumbnail(true).build(); // 대표 이미지로 등록
			
			gameImageMapper.insert(gameImageVO);
			
			// 해당 게임의 이미지를 전부 읽어와서 이미지 테이블에 넣는다
			Elements galleryElements = gameDoc.select(".gallery-wrapper .gallery .screenshot_thumbnail");

			for(Element gallery : galleryElements) {
				String dataType = gallery.selectFirst("img").attr("data-type");

				String externalImageUrl = "";
				
				if(dataType.contains("image")) { // 이미지인 경우
					externalImageUrl = "https://directg.net" + gallery.selectFirst("img").attr("src");
					
					// 그냥 큰 이미지로 하기로 하겠다.
					
					// 큰 이미지
					externalImageUrl = externalImageUrl.replace("thumbnail", "medium");

					// 일단 이미지를 다운로드 해본다
					uuid = UUID.randomUUID();
					fileName = uuid.toString() + "." + MyUtils.extractFileExtension(externalImageUrl);
					destinationFile = "C:/upload/s3/" + fileName;
					try {
						saveImage(externalImageUrl, destinationFile);
					} catch (IOException e1) { // 없는 파일이면 넘어가기
						continue;
					}
					
					// 이제 이걸 S3에 넣어야 한다
					S3Utils.uploadLocalFile(fileName, destinationFile);
					
					gameImageVO = GameImageVO.builder().gameNo(gameVO.getGameNo()).originFileName(fileName).storedFileName(fileName).build();
					
					log.info(gameImageVO);
					
					// 원본이미지 삽입
					gameImageMapper.insert(gameImageVO);
				}
			}
			
			System.out.println("==========================");
		}
	}
	
	// 게임 언어 등록
	public void registerGameLanguage() throws Exception {
		List<GameVO> gameList = gameMapper.selectList();
		Random random = new Random();
		
		for(GameVO game : gameList) {
			Set<Integer> set = new HashSet<>();

			// 랜덤으로 언어 4가지 넣기
			while(set.size() < 4) {
				Integer num = random.nextInt(12) + 1;
				set.add(num);
			}
			
			// set에는 4개가 있음
			for(Integer num : set){
				GameLanguageVO gameLanguageVO = GameLanguageVO.builder().gameNo(game.getGameNo()).languageNo(num.longValue()).build();
				gameLanguageMapper.insert(gameLanguageVO);
			}

			System.out.println("==========================");
		}
	}

	// 파일을 저장하는 메서드
	public static void saveImage(String imageUrl, String destinationFile) throws IOException {
		URL url = new URL(imageUrl);
		
		InputStream is = url.openStream(); // URL로부터 인풋 스트림을 연다
		OutputStream os = new FileOutputStream(destinationFile);
		
		byte[] b = new byte[2048]; // 파일을 한 번에 2KB씩 읽어옴
		int length;
		
		while((length = is.read(b)) != -1) { // 더 이상 읽어올 것이 없으면 반복문을 탈출함
			os.write(b, 0, length); // 현재 읽어들인 바이트 배열의 0번 인덱스부터 length 만큼의 길이를 출력 스트림에 기록함
		}
		
		is.close();
		os.close();
	}
	
	// 할인 랜덤으로 등록 (5% ~ 80%)
	// 랜덤으로 +1, +2 이렇게 해서 마지막까지
	public void registerSale() throws ParseException {
		List<GameVO> gameList = gameMapper.selectList();

		Random random = new Random();
		// random으로 1 / 3 확률로 뽑아서 당첨이면 해당 게임에 세일 등록하기
		// 날짜는 10월 1일부터 12월 31일까지로
		
		for(GameVO game : gameList) {
			int num = random.nextInt(3); // 0, 1, 2 나옴
			if(num == 0) {
				// 1 / 3 확률로 세일 등록
				
				// 세일 확률은 5 ~ 80 중 하나
				int saleRate = random.nextInt(76) + 5; // 0 ~ 75 나옴. 그래서 5 더함
				
				SaleVO saleVO = new SaleVO();
				saleVO.setGameNo(game.getGameNo());
				saleVO.setSaleRate(saleRate);
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
				Date startDate = sdf.parse("2023/10/01");
				Date endDate = sdf.parse("2024/01/01");
				
				saleVO.setSaleStartDate(startDate);
				saleVO.setSaleEndDate(endDate);
				
				saleMapper.insert(saleVO);
			}

			System.out.println("==========================");
		}
	}
	
	// 리뷰 랜덤으로 등록
	// 리뷰점수는 1, 2, 3, 4, 5 중 하나, 리뷰 내용도 5개 중 하나
	public void registerReview() throws Exception {
		List<GameVO> gameList = gameMapper.selectList();
		
		Random random = new Random();
		
		String[] reviewContents = new String[] {"똥겜이에요!", "재미없어요", "할만하네요", "재미있어요", "갓겜이네요!"};
		
		// 회원도 랜덤으로 (1L에서 5L까지 있음)
		// 리뷰도 랜덤으로 (1점 ~ 5점)
		// 게임당 리뷰 개수도 랜덤으로 (3개 ~ 7개)
		
		for(GameVO game : gameList) {
			int reviewCount = random.nextInt(5) + 6; // 5개 ~ 10개 (이 중 상당수가 겹칠 것임)
			
			for (int i = 0; i < reviewCount; i++) {
				int reviewScore = random.nextInt(5) + 1; // 1점 ~ 5점
				String reviewContent = reviewContents[reviewScore - 1];
				
				Long memberNo = (long) (random.nextInt(12) + 1); // 1L ~ 12L
				
				ReviewVO reviewVO;
				
				reviewVO = ReviewVO.builder().gameNo(game.getGameNo()).memberNo(memberNo).reviewScore(reviewScore).reviewContent(reviewContent).build();

				try {
					reviewMapper.insert(reviewVO);
				} catch (Exception e) {
					continue; // 실패 시 다음 루핑으로
				}
			}
			
		}
	}
	
	public static void main(String[] args) throws Exception {
		DataUtils dataUtils = new DataUtils();

//		dataUtils.registerGameLanguage();
		
//		dataUtils.registerGame();
		
//		dataUtils.registerSale();
		
		dataUtils.registerReview();
	}
	
}














