package kr.co.publicvoid.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import lombok.extern.log4j.Log4j;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;
import software.amazon.awssdk.services.s3.model.PutObjectResponse;
import software.amazon.awssdk.services.s3.model.S3Exception;

// AWS S3 업로드 관련

@Log4j
public class S3Utils {
	private static final String BUCKET_STRING = "bucket-jungmin";
	private static final String REGION = "ap-northeast-2";
	private static String ACCESS_KEY;
	private static String SECRET_KEY;
	
	static {
		Properties properties = new Properties(); // Properties 컬렉션 프레임워크 사용
		
		try(InputStream is = MybatisUtils.class.getResourceAsStream("/config.properties")){
			if(is != null) {
	            properties.load(is);
	            
	            ACCESS_KEY = properties.getProperty("iam-id");
	            SECRET_KEY = properties.getProperty("iam-key");
			}else {
				log.info("config.properties not exists");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// AWS 자격 증명을 제공하는 DefaultCredentialsProvider 초기화
	private static MyAwsCredentialsProvider credentialsProvider = new MyAwsCredentialsProvider(ACCESS_KEY, SECRET_KEY);

	// S3 클라이언트 초기화
	private static S3Client s3client = S3Client.builder()
										.region(Region.of(REGION))
										.credentialsProvider(credentialsProvider)
										.build();

	// 로컬에 받은 파일을 S3에 업로드
	public static void uploadLocalFile(String fileName, String localFilePath) throws S3Exception, IOException {
		// try-with-resources 패턴 사용
		try (InputStream inputStream = new FileInputStream(new File(localFilePath))) {

			// S3 클라이언트 생성

			// S3에 업로드할 때 사용할 PutObjectRequest 생성
			PutObjectRequest request = PutObjectRequest.builder()
														.bucket(BUCKET_STRING)
														.key(fileName)
														.acl("public-read")
														.build();

			// S3에 업로드 수행
			PutObjectResponse response = s3client.putObject(request, RequestBody.fromInputStream(inputStream, inputStream.available()));
			log.info(response);
		}
	}
	
	// ajax나 form으로 넘어온 값을 업로드
	public static void uploadFile(String fileName, InputStream inputStream) throws S3Exception, IOException {
		PutObjectRequest request = PutObjectRequest.builder()
													.bucket(BUCKET_STRING)
													.key(fileName)
													.acl("public-read")
													.build();
		
		s3client.putObject(request, RequestBody.fromInputStream(inputStream, inputStream.available()));
	}
	
}
